plugins {
    /*
    Instrumentation agent extension mechanism expects a single jar containing everything required
    for your extension. This also includes any external libraries that your extension uses and
    cannot access from application classpath (see comment below about `javax.servlet-api` dependency).

    Thus we use Shadow Gradle plugin to package our classes and all required runtime dependencies
    into a single jar.
    See https://imperceptiblethoughts.com/shadow/ for more details about Shadow plugin.
     */
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "com.diffplug.spotless" version "6.25.0"

    id "io.opentelemetry.instrumentation.muzzle-generation" version "2.5.0-alpha"
    id "io.opentelemetry.instrumentation.muzzle-check" version "2.5.0-alpha"

    id "pl.allegro.tech.build.axion-release" version "1.17.2"

    id "com.palantir.docker" version "0.36.0"
}

group 'rocks.inspectit.gepard.agent'
version = "0.0.1-SNAPSHOT"

sourceCompatibility = "17"
targetCompatibility = "17"

ext {
    versions = [
            // this line is managed by .github/scripts/update-sdk-version.sh
            opentelemetrySdk           : "1.39.0",

            // these lines are managed by .github/scripts/update-version.sh
            opentelemetryJavaagent     : "2.5.0",
            opentelemetryJavaagentAlpha: "2.5.0-alpha",

            junit                      : "5.10.2"
    ]

    deps = [
            autoservice: dependencies.create(group: 'com.google.auto.service', name: 'auto-service', version: '1.1.1')
    ]
}

configurations {
    /*
    We create a separate gradle configuration to grab a published Otel instrumentation agent.
    We don't need the agent during development of this extension module.
    This agent is used only during integration test.
    */
    otel
}

spotless {
  java {
    importOrder()
    removeUnusedImports()
    googleJavaFormat()
    formatAnnotations()
    target("src/**/*.java")
    licenseHeader '/* (C) 2024 */'
  }
}

dependencies {
    implementation(platform("io.opentelemetry:opentelemetry-bom:${versions.opentelemetrySdk}"))

    // these serve as a test of the instrumentation boms
    implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:${versions.opentelemetryJavaagent}"))
    implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:${versions.opentelemetryJavaagentAlpha}"))

    // inspectit-gepard dependencies
    implementation("net.bytebuddy:byte-buddy:1.14.15")
    implementation("ch.qos.logback:logback-classic:1.5.6")
    implementation("org.slf4j:jcl-over-slf4j:2.0.13")
    // http client for server notification
    implementation("org.apache.httpcomponents.client5:httpclient5:5.3.1")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.17.1")
    implementation("com.github.ben-manes.caffeine:caffeine:3.1.8")

    /*
    Interfaces and SPIs that we implement. We use `compileOnly` dependency because during
    runtime all necessary classes are provided by javaagent itself.
     */
    compileOnly("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi")
    compileOnly("io.opentelemetry.instrumentation:opentelemetry-instrumentation-api")
    compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api")
    compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-tooling")
    compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-bootstrap")

    // internal classes, which are loaded into the bootstrap classloader to be accessible globally
    compileOnly(project(":inspectit-gepard-bootstrap"))
    testImplementation(project(":inspectit-gepard-bootstrap"))

    // Provides @AutoService annotation that makes registration of our SPI implementations much easier
    compileOnly deps.autoservice
    annotationProcessor deps.autoservice

    // All dependencies below are only for tests
    testImplementation("org.mockito:mockito-core:5.12.0")
    testImplementation("org.mockito:mockito-junit-jupiter:5.12.0")
    testImplementation("org.awaitility:awaitility:4.2.1")
    // configure environmental variables
    testImplementation("com.github.stefanbirkner:system-lambda:1.2.1")
    testImplementation("io.opentelemetry.javaagent:opentelemetry-javaagent-tooling")
    testCompileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api")
    testCompileOnly("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${versions.junit}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${versions.junit}")

    // IntegrationTesting
    testImplementation("org.mock-server:mockserver-junit-jupiter:5.15.0")
    testImplementation 'org.testcontainers:mockserver:1.20.0'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.0'
    testImplementation 'org.mock-server:mockserver-netty:5.15.0'
    testImplementation("com.squareup.okhttp3:okhttp:4.12.0")
    testImplementation("io.opentelemetry.proto:opentelemetry-proto:1.3.2-alpha")
    testImplementation("com.google.protobuf:protobuf-java-util:3.25.4")
    // Reading Files from Resources easier
    implementation 'commons-io:commons-io:2.16.1'

    // Otel Java instrumentation that we use and extend during integration tests
    otel("io.opentelemetry.javaagent:opentelemetry-javaagent:${versions.opentelemetryJavaagent}")

    // TODO remove when start using io.opentelemetry.instrumentation.javaagent-instrumentation plugin
    add("codegen", "io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")
    add("muzzleBootstrap", "io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations-support:${versions.opentelemetryJavaagentAlpha}")
    add("muzzleTooling", "io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:${versions.opentelemetryJavaagentAlpha}")
    add("muzzleTooling", "io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")
}

// Produces a copy of upstream javaagent with this extension jar included inside it
// The location of extension directory inside agent jar is hard-coded in the agent source code
tasks.register('extendedAgent', Jar) {
    dependsOn(configurations.otel)
    archiveFileName = "inspectit-gepard-agent.jar"
    from zipTree(configurations.otel.singleFile)
//    from(tasks.shadowJar.archiveFile) {
//        into "extensions"
//    }

    from(tasks.repack.archiveFile) {
        into "extensions"
    }

    // Preserve MANIFEST.MF file from the upstream javaagent
    doFirst {
        manifest.from(
            zipTree(configurations.otel.singleFile).matching {
                include 'META-INF/MANIFEST.MF'
            }.singleFile
        )
    }
}

def repack = tasks.register("repack", Zip) {
    from layout.buildDirectory.dir('horst/shadowJar').get().asFile
    destinationDirectory.set(file("${buildDir}/libs"))
    archiveFileName.set("inspectit-gepard-agent-extension.jar")
}

def horst = tasks.register("horst", Copy) {
    dependsOn(shadowJar)

    destinationDir = layout.buildDirectory.dir('temp').get().asFile

    from(zipTree(tasks.shadowJar.archiveFile.get())) {
        into "temp"
    }

    from(project(":inspectit-gepard-bootstrap").jar.outputs) {
        into "temp"
    }

    finalizedBy(repack)
}

shadowJar {
    finalizedBy(horst)
}

tasks {
    test {
        useJUnitPlatform()

        inputs.files(layout.files(tasks.repack))
        inputs.files(layout.files(tasks.extendedAgent))

        // Necessary to use system-lambda in tests
        // See: https://github.com/stefanbirkner/system-lambda/issues/10
        jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'
        jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'

        systemProperty 'io.opentelemetry.smoketest.agentPath', configurations.otel.singleFile.absolutePath
        systemProperty 'io.opentelemetry.smoketest.extendedAgentPath', tasks.extendedAgent.archiveFile.get().asFile.absolutePath
        systemProperty 'io.opentelemetry.smoketest.extensionPath', tasks.repack.archiveFile.get().asFile.absolutePath

        finalizedBy jacocoTestReport
    }

    compileJava {
        options.release.set(17)
    }

    assemble.dependsOn(shadowJar)

    dockerPrepare.dependsOn(extendedAgent)

    docker {
        Provider<Directory> agentJar = layout.buildDirectory.dir("/libs/inspectit-gepard-agent.jar")

        name "inspectit/inspectit-gepard-agent"
        tag 'versioned', "hub.docker.com/${name}:${version}"
        dockerfile file('docker/Dockerfile')
        files 'docker/entrypoint.sh', agentJar.get().asFile
    }

    jacocoTestReport.dependsOn(test)
}
